package dynastyGUI;

import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;

import vehicletypes.*;

import dynastyIO.DynastyIO;
import search.searchHistory;

public class DynastyGUI extends JFrame {
	/**
	 * Autogenerated serial version UID
	 */
	private static final long serialVersionUID = -930754539549539445L;
	
	/**
	 * Global Admin login flag
	 */
	private static boolean isAdmin = false;
	
	private static ArrayList<Coupe> coupeList = new ArrayList<Coupe>();
	private static ArrayList<Sedan> sedanList = new ArrayList<Sedan>();
	private static ArrayList<Convertible> convertibleList = new ArrayList<Convertible>();
	private static ArrayList<Hatchback> hatchbackList = new ArrayList<Hatchback>();
	private static ArrayList<Truck> truckList = new ArrayList<Truck>();
	private static ArrayList<Wagon> wagonList = new ArrayList<Wagon>();
	
	@SuppressWarnings("unused")
	private static ArrayList<SUV> suvList = new ArrayList<SUV>();
	
	private static searchHistory history = new searchHistory();
	
	private static GUIvalues values = new GUIvalues();

	/**
	 * Launch the application.
	 * @throws IOException 
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public static void main(String[] args) throws IOException {
		ArrayList carsList = DynastyIO.importCarData();
		
		if (carsList.get(0).toString().contains("Error")) {
			System.out.print(carsList.get(0).toString());
		} else {
			coupeList = (ArrayList<Coupe>) carsList.get(0);
			sedanList = (ArrayList<Sedan>) carsList.get(1);
			convertibleList = (ArrayList<Convertible>) carsList.get(2);
			hatchbackList = (ArrayList<Hatchback>) carsList.get(3);
			truckList = (ArrayList<Truck>) carsList.get(4);
			wagonList = (ArrayList<Wagon>) carsList.get(5);
			suvList = (ArrayList<SUV>) carsList.get(6);
			
			// Search values for GUI
			values.setValues(carsList);
			
			// Call the init method to begin the GUI
			init();
		}
	}
	
	private static void init() {
		/*
		 * Method that starts the GUI inside the EventQueue Thread
		 */
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					DynastyGUI frame = new DynastyGUI();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	/**
	 * Create the frame.
	 */
	public DynastyGUI() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 300);
		loginPanel();
	}
	
	public void updatePane(JPanel panel) {
		getContentPane().add(panel);
		getContentPane().doLayout();
		getContentPane().revalidate();
		update(getGraphics());
	}
	
	public void loginPanel() {
		JPanel loginPanel = new JPanel();
		loginPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		loginPanel.setLayout(null);
		getContentPane().removeAll();
		
		JLabel title = new JLabel("Dynasty Cars Inventory System");
		title.setFont(new Font("Tahoma", Font.PLAIN, 20));
		title.setBounds(70, 11, 294, 42);
		loginPanel.add(title);
		
		JLabel loginLabel = new JLabel("Login");
		loginLabel.setFont(new Font("Tahoma", Font.PLAIN, 15));
		loginLabel.setBounds(194, 60, 46, 19);
		loginPanel.add(loginLabel);
		
		JLabel usernameLabel = new JLabel("Username");
		usernameLabel.setFont(new Font("Tahoma", Font.PLAIN, 14));
		usernameLabel.setBounds(234, 91, 68, 14);
		loginPanel.add(usernameLabel);
		
		JLabel passwordLabel = new JLabel("Password");
		passwordLabel.setFont(new Font("Tahoma", Font.PLAIN, 14));
		passwordLabel.setBounds(234, 116, 68, 14);
		loginPanel.add(passwordLabel);
		
		JTextField usernameBox = new JTextField();
		usernameBox.setBounds(319, 90, 86, 20);
		usernameBox.setColumns(10);
		loginPanel.add(usernameBox);
		
		JPasswordField passwordBox = new JPasswordField();
		passwordBox.setColumns(10);
		passwordBox.setBounds(319, 115, 86, 20);
		passwordBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				String uname = usernameBox.getText();
				String pword = String.valueOf(passwordBox.getPassword());
				
				if(uname.equals("admin") && pword.equals("password")) {
					JOptionPane.showMessageDialog(getContentPane(), "Admin Logged in Succesfully");
					isAdmin = true;
					menuAdminPanel();
				}else
				{
					JOptionPane.showMessageDialog(getContentPane(), "Incorrect username or password. Please try again.");
				}
			}
		});
		loginPanel.add(passwordBox);
		
		JButton adminLoginButton = new JButton("Enter");
		adminLoginButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				String uname = usernameBox.getText();
				String pword = String.valueOf(passwordBox.getPassword());
				
				if(uname.equals("admin") && pword.equals("password")) {
					JOptionPane.showMessageDialog(getContentPane(), "Admin Logged in Succesfully");
					isAdmin = true;
					menuAdminPanel();
				}else
				{
					JOptionPane.showMessageDialog(getContentPane(), "Incorrect username or password. Please try again.");
				}
			}
		});
		adminLoginButton.setBounds(256, 141, 89, 23);
		loginPanel.add(adminLoginButton);
		
		JLabel guestLabel = new JLabel("Guest Login");
		guestLabel.setFont(new Font("Tahoma", Font.PLAIN, 14));
		guestLabel.setBounds(70, 90, 75, 17);
		loginPanel.add(guestLabel);
		
		JButton guestLoginButton = new JButton("Enter");
		guestLoginButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				searchPanel();
			}
		});
		guestLoginButton.setBounds(66, 141, 89, 23);
		loginPanel.add(guestLoginButton);
		
		updatePane(loginPanel);
	}
	
	public void searchPanel() {
		JPanel searchPanel = new JPanel();
		searchPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		searchPanel.setLayout(null);
		getContentPane().removeAll();
		
		JLabel lblSearch = new JLabel("Search");
		lblSearch.setFont(new Font("Tahoma", Font.PLAIN, 20));
		lblSearch.setBounds(187, 11, 60, 37);
		searchPanel.add(lblSearch);
		
		JLabel lblNewLabel = new JLabel("Enter Search Parameters:");
		lblNewLabel.setFont(new Font("Tahoma", Font.PLAIN, 12));
		lblNewLabel.setBounds(68, 68, 140, 14);
		searchPanel.add(lblNewLabel);
		
		String[] color = values.getColors();
		String[] makes = values.getMakes();
		String[] type = {"All", "SUV", "Truck", "Coupe", "Sedan", "Convertible", 
				"Hatchback", "Wagon"};
		String[] models = values.getModels();
		String[] year = values.getYears();
		String[] engine = values.getEngines();
		
		JLabel colorLabel = new JLabel("Color");
		colorLabel.setFont(new Font("Tahoma", Font.PLAIN, 12));
		colorLabel.setBounds(260, 146, 143, 25);
		searchPanel.add(colorLabel);
		
		JComboBox<String> colorBox = new JComboBox<String>(color);
		colorBox.setToolTipText("Color");
		colorBox.setSelectedItem("All");
		colorBox.setBounds(260, 168, 86, 20);
		searchPanel.add(colorBox);
		
		JLabel brandLabel = new JLabel("Brand");
		brandLabel.setFont(new Font("Tahoma", Font.PLAIN, 12));
		brandLabel.setBounds(68, 93, 86, 20);
		searchPanel.add(brandLabel);
		
		JComboBox<String> brandBox = new JComboBox<String>(makes);
		brandBox.setToolTipText("Brand");
		brandBox.setSelectedItem("All");
		brandBox.setBounds(68, 115, 86, 20);
		searchPanel.add(brandBox);
		
		JLabel typeLabel = new JLabel("Type");
		typeLabel.setFont(new Font("Tahoma", Font.PLAIN, 12));
		typeLabel.setBounds(164, 93, 86, 20);
		searchPanel.add(typeLabel);
		
		JComboBox<String> typeBox = new JComboBox<String>(type);
		typeBox.setToolTipText("Type");
		typeBox.setSelectedItem("All");
		typeBox.setBounds(164, 115, 86, 20);
		searchPanel.add(typeBox);
		
		JLabel modelLabel = new JLabel("Model");
		modelLabel.setFont(new Font("Tahoma", Font.PLAIN, 12));
		modelLabel.setBounds(164, 146, 86, 20);
		searchPanel.add(modelLabel);
		
		JComboBox<String> modelBox = new JComboBox<String>(models);
		modelBox.setToolTipText("Model");
		modelBox.setSelectedItem("All");
		modelBox.setBounds(164, 168, 86, 20);
		searchPanel.add(modelBox);
		
		JLabel yearLabel = new JLabel("Year");
		yearLabel.setFont(new Font("Tahoma", Font.PLAIN, 12));
		yearLabel.setBounds(68, 146, 86, 20);
		searchPanel.add(yearLabel);
		
		JComboBox<String> yearBox = new JComboBox<String>(year);
		yearBox.setToolTipText("Year");
		yearBox.setSelectedItem("All");
		yearBox.setBounds(68, 168, 86, 20);
		searchPanel.add(yearBox);
		
		JLabel engineLabel = new JLabel("Engine");
		engineLabel.setFont(new Font("Tahoma", Font.PLAIN, 12));
		engineLabel.setBounds(260, 93, 86, 20);
		searchPanel.add(engineLabel);
		
		JComboBox<String> engineBox = new JComboBox<String>(engine);
		engineBox.setToolTipText("Engine");
		engineBox.setSelectedItem("All");
		engineBox.setBounds(260, 115, 86, 20);
		searchPanel.add(engineBox);
		
		JButton findBtn = new JButton("Find");
		findBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				//Access database to perform search function
				JOptionPane.showMessageDialog(getContentPane(), "Searching Database for the Perfect Vehicle");
				searchDisplayPanel((String)brandBox.getSelectedItem(), 
						(String)modelBox.getSelectedItem(), (String)yearBox.getSelectedItem(),
						(String)typeBox.getSelectedItem(), (String)colorBox.getSelectedItem(),
						(String)engineBox.getSelectedItem());
			}
		});
		findBtn.setBounds(161, 227, 89, 23);
		searchPanel.add(findBtn);
		
		if (isAdmin) {
			JButton backMenuBtn = new JButton("Back");
			backMenuBtn.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) 
				{
					menuAdminPanel();
				}
			});
			backMenuBtn.setBounds(10, 227, 86, 23);
			searchPanel.add(backMenuBtn);
			
			JLabel label = new JLabel("Admin Controls");
			label.setBounds(10, 11, 96, 14);
			searchPanel.add(label);
			
			JButton btnSearchHistory = new JButton("Search History");
			btnSearchHistory.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) 
				{
					historyAdminPanel();
				}
			});
			btnSearchHistory.setBounds(300, 220, 118, 30);
			searchPanel.add(btnSearchHistory); 
		} else {
			JButton button = new JButton("Logout");
			button.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) 
				{
					loginPanel();
				}
			});
			button.setBounds(10, 227, 86, 23);
			searchPanel.add(button);
		}
		
		updatePane(searchPanel);
	}
	
	public void menuAdminPanel() {
		JPanel menuAdmin = new JPanel();
		menuAdmin.setBorder(new EmptyBorder(5, 5, 5, 5));
		menuAdmin.setLayout(null);
		getContentPane().removeAll();
		
		JLabel lblMainMenu = new JLabel("Main Menu");
		lblMainMenu.setFont(new Font("Tahoma", Font.PLAIN, 20));
		lblMainMenu.setBounds(169, 11, 96, 37);
		menuAdmin.add(lblMainMenu);
		
		JLabel searchLabel = new JLabel("Search");
		searchLabel.setFont(new Font("Tahoma", Font.PLAIN, 14));
		searchLabel.setBounds(66, 75, 142, 17);
		menuAdmin.add(searchLabel);
		
		JLabel lblDisplayTotalInventory = new JLabel("Display Total Inventory");
		lblDisplayTotalInventory.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblDisplayTotalInventory.setBounds(66, 100, 142, 17);
		menuAdmin.add(lblDisplayTotalInventory);
		
		JLabel lblAddCar = new JLabel("Add Car");
		lblAddCar.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblAddCar.setBounds(66, 125, 142, 17);
		menuAdmin.add(lblAddCar);
		
		JLabel lblExport = new JLabel("Export Database");
		lblExport.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblExport.setBounds(66, 150, 142, 17);
		menuAdmin.add(lblExport);
		
		JLabel lblLogOut = new JLabel("Log Out");
		lblLogOut.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblLogOut.setBounds(66, 175, 142, 17);
		menuAdmin.add(lblLogOut);
		
		JLabel lblExit = new JLabel("Exit");
		lblExit.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblExit.setBounds(66, 200, 142, 17);
		menuAdmin.add(lblExit);
		
		JButton searchBtn = new JButton("Go");
		searchBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				searchPanel();
			}
		});
		searchBtn.setBounds(246, 74, 89, 23);
		menuAdmin.add(searchBtn);
		
		JButton displayBtn = new JButton("Go");
		displayBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				displayAdminPanel();
			}
		});
		displayBtn.setBounds(246, 99, 89, 23);
		menuAdmin.add(displayBtn);
		
		JButton btnAddCar = new JButton("Go");
		btnAddCar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				String[] bodies = new String[] {"SUV", "Truck", "Coupe", "Sedan", 
						"Convertible", "Hatchback", "Wagon"};
				String type = (String)JOptionPane.showInputDialog(
	                    getContentPane(), "Select Car Type", "Add Car",
	                    JOptionPane.PLAIN_MESSAGE, null, bodies, "");
				String make = (String)JOptionPane.showInputDialog(
	                    getContentPane(), "Enter Car Make", "Add Car",
	                    JOptionPane.PLAIN_MESSAGE, null, null, "Honda");
				String model = (String)JOptionPane.showInputDialog(
	                    getContentPane(), "Enter Car Model", "Add Car",
	                    JOptionPane.PLAIN_MESSAGE, null, null, "Accord");
				String year = (String)JOptionPane.showInputDialog(
	                    getContentPane(), "Enter Car Year", "Add Car",
	                    JOptionPane.PLAIN_MESSAGE, null, null, "2010");
				String color = (String)JOptionPane.showInputDialog(
	                    getContentPane(), "Enter Car Color", "Add Car",
	                    JOptionPane.PLAIN_MESSAGE, null, null, "Red");
				String engine = (String)JOptionPane.showInputDialog(
	                    getContentPane(), "Select Car Engine", "Add Car",
	                    JOptionPane.PLAIN_MESSAGE, null, values.getEngines(), "");
				String transmission = (String)JOptionPane.showInputDialog(
	                    getContentPane(), "Select Car Transmission", "Add Car",
	                    JOptionPane.PLAIN_MESSAGE, null, values.getTransmissions(), "");
				
				Car addNewCar;
				
				try {
					if (type.equalsIgnoreCase("Coupe")) {
						addNewCar = new Coupe();
						coupeList.add((Coupe) addNewCar);
					} else if (type.equalsIgnoreCase("Sedan")) {
						addNewCar = new Sedan();
						sedanList.add((Sedan) addNewCar);
					} else if (type.equalsIgnoreCase("Convertible")) {
						addNewCar = new Convertible();
						convertibleList.add((Convertible) addNewCar);
					} else if (type.equalsIgnoreCase("Hatchback")) {
						addNewCar = new Hatchback();
						hatchbackList.add((Hatchback) addNewCar);
					} else if (type.equalsIgnoreCase("SUV")) {
						addNewCar = new SUV();
						suvList.add((SUV) addNewCar);
					} else if (type.equalsIgnoreCase("Truck")) {
						addNewCar = new Truck();
						truckList.add((Truck) addNewCar);
					} else if (type.equalsIgnoreCase("Wagon")) {
						addNewCar = new Wagon();
						wagonList.add((Wagon) addNewCar);
					} else {
						throw new Exception("Error Adding Car\nType Not found!");
					}
					
					addNewCar.setMake(make);
					addNewCar.setModel(model);
					addNewCar.setYear(Integer.valueOf(year));
					addNewCar.setColor(color);
					addNewCar.setEngine(engine);
					addNewCar.setTransmission(transmission);
					
					values.addValues(addNewCar);
					
					JOptionPane.showMessageDialog(getContentPane(), "Adding New Car");
				} catch (Exception ex2) {
					JOptionPane.showMessageDialog(getContentPane(), "Error adding New Car!\n" + 
							ex2.getMessage());
				}
			}
		});
		btnAddCar.setBounds(246, 124, 89, 23);
		menuAdmin.add(btnAddCar);
		
		JButton btnExport = new JButton("Go");
		btnExport.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				JOptionPane.showMessageDialog(getContentPane(), "Exporting Database");
				try {
					DynastyIO.exportCarData(coupeList, sedanList, convertibleList, 
							hatchbackList, truckList, wagonList, suvList);
				} catch (Exception ex) {
					JOptionPane.showMessageDialog(getContentPane(), "Export Failed\n" + 
							ex.getMessage());
				}
			}
		});
		btnExport.setBounds(246, 149, 89, 23);
		menuAdmin.add(btnExport);
		
		JButton logOutBtn = new JButton("Go");
		logOutBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				int exportYN = JOptionPane.showConfirmDialog(
				    getContentPane(), "Do you want to export the database?",
				    "Export Database?", JOptionPane.YES_NO_OPTION);
				System.out.println(exportYN);
				if (exportYN == 0) {
					try {
						DynastyIO.exportCarData(coupeList, sedanList, convertibleList, 
								hatchbackList, truckList, wagonList, suvList);
					} catch (Exception ex) {
						JOptionPane.showMessageDialog(getContentPane(), "Export Failed\n" + 
								ex.getMessage());
					}
				}
				JOptionPane.showMessageDialog(getContentPane(), "Logging out");
				isAdmin = false;
				loginPanel();
			}
		});
		logOutBtn.setBounds(246, 174, 89, 23);
		menuAdmin.add(logOutBtn);
		
		JButton exitBtn = new JButton("Go");
		exitBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				int exportYN = JOptionPane.showConfirmDialog(
					    getContentPane(), "Do you want to export the database?",
					    "Export Database?", JOptionPane.YES_NO_OPTION);
					System.out.println(exportYN);
					if (exportYN == 0) {
						try {
							DynastyIO.exportCarData(coupeList, sedanList, convertibleList, 
									hatchbackList, truckList, wagonList, suvList);
						} catch (Exception ex) {
							JOptionPane.showMessageDialog(getContentPane(), "Export Failed\n" + 
									ex.getMessage());
						}
					}
				JOptionPane.showMessageDialog(getContentPane(), "Closing Program");
				System.exit(0);
			}
		});
		exitBtn.setBounds(246, 199, 89, 23);
		menuAdmin.add(exitBtn);
		
		JLabel lblNewLabel = new JLabel("Admin Controls");
		lblNewLabel.setBounds(10, 11, 96, 14);
		menuAdmin.add(lblNewLabel);
		
		updatePane(menuAdmin);
	}
	
	public void searchDisplayPanel(String make, String model, String year, 
			String type, String color, String engine) {
		
		// Add search string to history
		history.add(String.format("%s %s %s %s %s %s", make, model, year, type, color, engine));
		
		JPanel searchDisplayPanel = new JPanel();
		searchDisplayPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		searchDisplayPanel.setLayout(null);
		getContentPane().removeAll();
		
		JLabel lblNewLabel = new JLabel("Cars Found");
		lblNewLabel.setFont(new Font("Tahoma", Font.PLAIN, 20));
		lblNewLabel.setBounds(170, 24, 99, 19);
		searchDisplayPanel.add(lblNewLabel);
		
		//Create a text area.
        JTextArea displaySearch = new JTextArea();
        displaySearch.setFont(new Font("Serif", Font.PLAIN, 16));
        displaySearch.setLineWrap(false);
        
        //Create Scroll Pane
        JScrollPane searchScrollPane = new JScrollPane(displaySearch);
        searchScrollPane.setHorizontalScrollBarPolicy(
        		JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        searchScrollPane.setVerticalScrollBarPolicy(
                JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        searchScrollPane.setBounds(10, 50, 410, 175);
        searchScrollPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        searchDisplayPanel.add(searchScrollPane);
		
		JButton newSearchBtn = new JButton("New Search");
		newSearchBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				searchPanel();
			}
		});
		newSearchBtn.setBounds(10, 227, 105, 23);
		newSearchBtn.setEnabled(false);
		searchDisplayPanel.add(newSearchBtn);
		
		updatePane(searchDisplayPanel);
		
		Runnable displayAll = new Runnable() {
			@Override
			public void run() {
				StringBuffer carSearch = new StringBuffer();
				
				if (type.equalsIgnoreCase("All")) {
					carSearch.append(search.searchCars.searchAll(coupeList, "Coupe"));
					carSearch.append(search.searchCars.searchAll(sedanList, "Sedan"));
					carSearch.append(search.searchCars.searchAll(convertibleList, "Convertible"));
					carSearch.append(search.searchCars.searchAll(hatchbackList, "Hatchback"));
					carSearch.append(search.searchCars.searchAll(truckList, "Truck"));
					carSearch.append(search.searchCars.searchAll(wagonList, "Wagon"));
				} else {
					if (type.equalsIgnoreCase("Coupe")) { 
						carSearch.append(search.searchCars.searchAll(coupeList, "Coupe"));
					} else if (type.equalsIgnoreCase("Sedan")) { 
						carSearch.append(search.searchCars.searchAll(sedanList, "Sedan"));
					} else if (type.equalsIgnoreCase("Convertible")) { 
						carSearch.append(search.searchCars.searchAll(convertibleList, "Convertible"));
					} else if (type.equalsIgnoreCase("Hatchback")) { 
						carSearch.append(search.searchCars.searchAll(hatchbackList, "Hatchback"));
					} else if (type.equalsIgnoreCase("Truck")) { 
						carSearch.append(search.searchCars.searchAll(truckList, "Truck"));
					} else if (type.equalsIgnoreCase("Wagon")) { 
						carSearch.append(search.searchCars.searchAll(wagonList, "Wagon"));
					}
				}
				if (!make.equalsIgnoreCase("All")) {
					carSearch = search.searchCars.searchFor(carSearch, make);
				}
				if (!model.equalsIgnoreCase("All")) {
					carSearch = search.searchCars.searchFor(carSearch, model);
				}
				if (!year.equalsIgnoreCase("All")) {
					carSearch = search.searchCars.searchFor(carSearch, year);
				}
				if (!color.equalsIgnoreCase("All")) {
					carSearch = search.searchCars.searchFor(carSearch, color);
				}
				if (!engine.equalsIgnoreCase("All")) {
					carSearch = search.searchCars.searchFor(carSearch, engine);
				}
				
				try {
					displaySearch.append(carSearch.toString());
				} catch (NullPointerException e) {
					displaySearch.append("None Found");
				}
				
				displaySearch.setEditable(false);
				newSearchBtn.setEnabled(true);
				
				updatePane(searchDisplayPanel);
			}
		};

		Thread displayAllThread = new Thread(displayAll);
		
		displayAllThread.start();
	}
	
/*	public void searchAdminPanel() {
		JPanel searchAdminPanel = new JPanel();
		searchAdminPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		searchAdminPanel.setLayout(null);
		getContentPane().removeAll();
		
		
		JLabel lblSearch = new JLabel("Search");
		lblSearch.setFont(new Font("Tahoma", Font.PLAIN, 20));
		lblSearch.setBounds(187, 11, 60, 37);
		searchAdminPanel.add(lblSearch);
		
		JLabel lblNewLabel = new JLabel("Enter Search Parameters:");
		lblNewLabel.setFont(new Font("Tahoma", Font.PLAIN, 12));
		lblNewLabel.setBounds(68, 68, 140, 14);
		searchAdminPanel.add(lblNewLabel);
		
		String[] color = {"Color", "Blue", "Red", "Green"};
		String[] brand = {"Brand", "Toyota", "Dodge", "Ram"};
		String[] type = {"Type", "SUV", "Truck", "Coupe"};
		String[] MPG = {"MPG", "70-45", "44-35", "34-25", "24-10"};
		String[] convert = {"Convertible", "Yes", "No"};
		String[] fuel = {"Fuel type", "Gasoline", "Diesel"};
		
		JComboBox<String> colorBox = new JComboBox<String>(color);
		colorBox.setToolTipText("Color");
		colorBox.setBounds(260, 124, 86, 20);
		searchAdminPanel.add(colorBox);
		
		JComboBox<String> brandBox = new JComboBox<String>(brand);
		brandBox.setToolTipText("Brand");
		brandBox.setBounds(68, 93, 86, 20);
		searchAdminPanel.add(brandBox);
		
		JComboBox<String> typeBox = new JComboBox<String>(type);
		typeBox.setToolTipText("Type");
		typeBox.setBounds(164, 93, 86, 20);
		searchAdminPanel.add(typeBox);
		
		JComboBox<String> convertBox = new JComboBox<String>(convert);
		convertBox.setToolTipText("Convertible");
		convertBox.setBounds(164, 124, 86, 20);
		searchAdminPanel.add(convertBox);
		
		JComboBox<String> fuelBox = new JComboBox<String>(fuel);
		fuelBox.setToolTipText("Fuel Type");
		fuelBox.setBounds(68, 124, 86, 20);
		searchAdminPanel.add(fuelBox);
		
		JComboBox<String> MPGBox = new JComboBox<String>(MPG);
		MPGBox.setToolTipText("MPG");
		MPGBox.setBounds(260, 93, 86, 20);
		searchAdminPanel.add(MPGBox);
		
		JButton findBtn = new JButton("Find");
		findBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				//Access database to perform search function
				JOptionPane.showMessageDialog(getContentPane(), "Searching Database for the Perfect Vehicle");
				searchDisplayAdminPanel();
			}
		});
		findBtn.setBounds(161, 169, 89, 23);
		searchAdminPanel.add(findBtn);
		
		JButton backMenuBtn = new JButton("Back");
		backMenuBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				menuAdminPanel();
			}
		});
		backMenuBtn.setBounds(10, 227, 86, 23);
		searchAdminPanel.add(backMenuBtn);
		
		JLabel label = new JLabel("Admin Controls");
		label.setBounds(10, 11, 96, 14);
		searchAdminPanel.add(label);
		
		JButton btnSearchHistory = new JButton("Search History");
		btnSearchHistory.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				historyAdminPanel();
			}
		});
		btnSearchHistory.setBounds(10, 186, 118, 30);
		searchAdminPanel.add(btnSearchHistory);
		
		updatePane(searchAdminPanel);
	}
	*/
	public void displayAdminPanel() {
		
		JPanel displayAdminPanel = new JPanel();
		displayAdminPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		displayAdminPanel.setLayout(null);
		getContentPane().removeAll();
		
		JLabel totalInventory = new JLabel("Entire Inventory");
		totalInventory.setFont(new Font("Tahoma", Font.PLAIN, 20));
		totalInventory.setBounds(146, 24, 143, 25);
		displayAdminPanel.add(totalInventory);
		
		//Create a text area.
        JTextArea displaySearch = new JTextArea();
        displaySearch.setFont(new Font("Serif", Font.PLAIN, 16));
        displaySearch.setLineWrap(false);
        
        //Create Scroll Pane
        JScrollPane searchScrollPane = new JScrollPane(displaySearch);
        searchScrollPane.setHorizontalScrollBarPolicy(
        		JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        searchScrollPane.setVerticalScrollBarPolicy(
                JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        searchScrollPane.setBounds(10, 50, 410, 175);
        searchScrollPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        displayAdminPanel.add(searchScrollPane);
        
		JButton backBtn = new JButton("Back");
		backBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				menuAdminPanel();
			}
		});
		backBtn.setBounds(10, 227, 89, 23);
		backBtn.setEnabled(false);
		displayAdminPanel.add(backBtn);
		
		JLabel label = new JLabel("Admin Controls");
		label.setBounds(10, 11, 96, 14);
		displayAdminPanel.add(label);
		
		updatePane(displayAdminPanel);
		
		Runnable displayAll = new Runnable() {
			@Override
			public void run() {
				StringBuffer carSearch = search.searchCars.searchAll(coupeList, "Coupe");
				carSearch.append(search.searchCars.searchAll(sedanList, "Sedan"));
				carSearch.append(search.searchCars.searchAll(convertibleList, "Convertible"));
				carSearch.append(search.searchCars.searchAll(hatchbackList, "Hatchback"));
				carSearch.append(search.searchCars.searchAll(truckList, "Truck"));
				carSearch.append(search.searchCars.searchAll(wagonList, "Wagon"));
				
				displaySearch.append(carSearch.toString());
				displaySearch.setEditable(false);
				backBtn.setEnabled(true);
				
				updatePane(displayAdminPanel);
			}
		};

		Thread displayAllThread = new Thread(displayAll);
		
		displayAllThread.start();
/*		
		StringBuffer carSearch = search.searchCars.doSearch(coupeList, "Coupe");
		carSearch.append(search.searchCars.doSearch(sedanList, "Sedan"));
		carSearch.append(search.searchCars.doSearch(convertibleList, "Convertible"));
		carSearch.append(search.searchCars.doSearch(hatchbackList, "Hatchback"));
		carSearch.append(search.searchCars.doSearch(truckList, "Truck"));
		carSearch.append(search.searchCars.doSearch(wagonList, "Wagon"));
		
		System.out.print(carSearch.toString());
		
		displaySearch.append(carSearch.toString());
		displaySearch.setEditable(false);
		
		updatePane(displayAdminPanel);
		*/
	}
	
/*	public void searchDisplayAdminPanel() {
		JPanel searchDisplayAdminPanel = new JPanel();
		searchDisplayAdminPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		searchDisplayAdminPanel.setLayout(null);
		getContentPane().removeAll();
		
		
		JLabel lblNewLabel = new JLabel("Cars Found");
		lblNewLabel.setFont(new Font("Tahoma", Font.PLAIN, 20));
		lblNewLabel.setBounds(170, 24, 99, 19);
		searchDisplayAdminPanel.add(lblNewLabel);
		
		JLabel lblNewLabel_1 = new JLabel("Somehow displaying data collected from database...");
		lblNewLabel_1.setBounds(74, 98, 334, 29);
		searchDisplayAdminPanel.add(lblNewLabel_1);
		
		JButton newSearchBtn = new JButton("New Search");
		newSearchBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				searchAdminPanel();
			}
		});
		newSearchBtn.setBounds(303, 209, 105, 29);
		searchDisplayAdminPanel.add(newSearchBtn);
		
		JLabel label = new JLabel("Admin Controls");
		label.setBounds(10, 11, 96, 14);
		searchDisplayAdminPanel.add(label);
		
		updatePane(searchDisplayAdminPanel);
	}
	*/
	public void historyAdminPanel() {
		JPanel historyAdminPanel = new JPanel();
		historyAdminPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		historyAdminPanel.setLayout(null);
		getContentPane().removeAll();
		
		JLabel lblUserSearchHistory = new JLabel("User Search History");
		lblUserSearchHistory.setFont(new Font("Tahoma", Font.PLAIN, 20));
		lblUserSearchHistory.setBounds(130, 22, 175, 25);
		historyAdminPanel.add(lblUserSearchHistory);
		
		JLabel label = new JLabel("Admin Controls");
		label.setBounds(10, 11, 96, 14);
		historyAdminPanel.add(label);
		
		//Create a text area.
        JTextArea displaySearch = new JTextArea();
        displaySearch.setFont(new Font("Serif", Font.PLAIN, 16));
        displaySearch.setLineWrap(false);
        
        //Create Scroll Pane
        JScrollPane searchScrollPane = new JScrollPane(displaySearch);
        searchScrollPane.setHorizontalScrollBarPolicy(
        		JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        searchScrollPane.setVerticalScrollBarPolicy(
                JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        searchScrollPane.setBounds(10, 50, 410, 175);
        searchScrollPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        historyAdminPanel.add(searchScrollPane);
		
		JButton newSearchBtn = new JButton("New Search");
		newSearchBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				searchPanel();
			}
		});
		newSearchBtn.setBounds(10, 227, 105, 23);
		newSearchBtn.setEnabled(false);
		historyAdminPanel.add(newSearchBtn);
		
		updatePane(historyAdminPanel);
		
		try {
			displaySearch.append(history.displaySearchHistory());
		} catch (NullPointerException e) {
			displaySearch.append("None Found");
		}
		
		displaySearch.setEditable(false);
		newSearchBtn.setEnabled(true);
		
		updatePane(historyAdminPanel);
	}
	
	public void displayPanel() {
		JPanel displayPanel = new JPanel();
		displayPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		displayPanel.setLayout(null);
		getContentPane().removeAll();
		
		JLabel displayAll = new JLabel("Somehow collect and display all data from database");
		displayAll.setBounds(86, 117, 315, 14);
		displayPanel.add(displayAll);
		
		JLabel totalInventory = new JLabel("Entire Inventory");
		totalInventory.setFont(new Font("Tahoma", Font.PLAIN, 20));
		totalInventory.setBounds(146, 24, 143, 25);
		displayPanel.add(totalInventory);
		
		JButton backBtn = new JButton("Back");
		backBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				menuPanel();
			}
		});
		backBtn.setBounds(10, 227, 89, 23);
		displayPanel.add(backBtn);
		
		updatePane(displayPanel);
	}
	
	public void menuPanel() {
		JPanel menuPanel = new JPanel();
		menuPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		menuPanel.setLayout(null);
		getContentPane().removeAll();
		
		JLabel lblMainMenu = new JLabel("Main Menu");
		lblMainMenu.setFont(new Font("Tahoma", Font.PLAIN, 20));
		lblMainMenu.setBounds(169, 11, 96, 37);
		menuPanel.add(lblMainMenu);
		
		JLabel searchLabel = new JLabel("Search");
		searchLabel.setFont(new Font("Tahoma", Font.PLAIN, 14));
		searchLabel.setBounds(66, 75, 142, 17);
		menuPanel.add(searchLabel);
		
		JLabel lblDisplayTotalInventory = new JLabel("Display Total Inventory");
		lblDisplayTotalInventory.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblDisplayTotalInventory.setBounds(66, 100, 142, 17);
		menuPanel.add(lblDisplayTotalInventory);
		
		JLabel lblLogOut = new JLabel("Log Out");
		lblLogOut.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblLogOut.setBounds(66, 125, 142, 17);
		menuPanel.add(lblLogOut);
		
		JLabel lblExit = new JLabel("Exit");
		lblExit.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblExit.setBounds(66, 150, 142, 17);
		menuPanel.add(lblExit);
		
		JButton searchBtn = new JButton("Go");
		searchBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				searchPanel();
			}
		});
		searchBtn.setBounds(246, 74, 89, 23);
		menuPanel.add(searchBtn);
		
		JButton displayBtn = new JButton("Go");
		displayBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				displayPanel();
			}
		});
		displayBtn.setBounds(246, 99, 89, 23);
		menuPanel.add(displayBtn);
		
		JButton logOutBtn = new JButton("Go");
		logOutBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				JOptionPane.showMessageDialog(getContentPane(), "Logging out");
				loginPanel();
			}
		});
		logOutBtn.setBounds(246, 124, 89, 23);
		menuPanel.add(logOutBtn);
		
		JButton exitBtn = new JButton("Go");
		exitBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				JOptionPane.showMessageDialog(getContentPane(), "Closing Program");
				System.exit(0);
			}
		});
		exitBtn.setBounds(246, 149, 89, 23);
		menuPanel.add(exitBtn);
		
		updatePane(menuPanel);
	}
}
